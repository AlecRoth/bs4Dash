% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tabs.R, R/dashboardControlbar.R, R/aliases.R
\name{bs4TabsetPanel}
\alias{bs4TabsetPanel}
\alias{controlbarMenu}
\alias{tabsetPanel}
\title{Create a tabsetPanel}
\usage{
bs4TabsetPanel(
  ...,
  id = NULL,
  selected = NULL,
  type = c("tabs", "pills"),
  position = NULL
)

controlbarMenu(
  ...,
  id = NULL,
  selected = NULL,
  type = c("tabs", "pills"),
  position = NULL
)

tabsetPanel(
  ...,
  id = NULL,
  selected = NULL,
  type = c("tabs", "pills"),
  position = NULL
)
}
\arguments{
\item{...}{\code{\link[shiny:tabPanel]{tabPanel()}} elements to include in the tabset}

\item{id}{If provided, you can use \verb{input$}\emph{\code{id}} in your
server logic to determine which of the current tabs is active. The value
will correspond to the \code{value} argument that is passed to
\code{\link[shiny:tabPanel]{tabPanel()}}.}

\item{selected}{The \code{value} (or, if none was supplied, the \code{title})
of the tab that should be selected by default. If \code{NULL}, the first
tab will be selected.}

\item{type}{\describe{
\item{\code{"tabs"}}{Standard tab look}
\item{\code{"pills"}}{Selected tabs use the background fill color}
\item{\code{"hidden"}}{Hides the selectable tabs. Use \code{type = "hidden"} in
conjunction with \code{\link[shiny:tabPanel]{tabPanelBody()}} and \code{\link[shiny:updateTabsetPanel]{updateTabsetPanel()}} to control the
active tab via other input controls. (See example below)}
}}

\item{position}{This argument is deprecated; it has been discontinued in
Bootstrap 3.}
}
\description{
Imported by \link{bs4TabCard} but can be used alone. This is a modified shiny::tabsetPanel,
to handle bootstrap 4.
}
\examples{
if(interactive()){
 library(shiny)
 library(bs4Dash)

 shiny::shinyApp(
   ui = bs4DashPage(
    navbar = bs4DashNavbar(),
    sidebar = bs4DashSidebar(),
    controlbar = bs4DashControlbar(),
    footer = bs4DashFooter(),
    title = "test",
    body = bs4DashBody(
     
     # manually inserted panels
     bs4TabsetPanel(
      id = "tabcard",
      side = "left",
      tabPanel(
       tabName = "Tab 1", 
       active = FALSE,
       "Content 1"
      ),
      tabPanel(
       tabName = "Tab 2", 
       active = TRUE,
       "Content 2"
      ),
      tabPanel(
       tabName = "Tab 3", 
       active = FALSE,
       "Content 3"
      )
     ),
     
     br(), br(),
     # programmatically inserted panels
     bs4TabsetPanel(
       id = "tabset",
       side = "left",
       .list = lapply(1:3, function(i) {
         bs4TabPanel(
           tabName = paste0("Tab", i), 
           active = FALSE,
           paste("Content", i)
         )
       })
      ),
      
      br(), br(),
      # vertical tabset
      bs4TabsetPanel(
       id = "verttabset",
       side = "left",
       vertical = TRUE,
       .list = lapply(1:3, function(i) {
         bs4TabPanel(
           tabName = paste0("Tab", i), 
           active = FALSE,
           paste("Content", i)
         )
       })
      )
    )
   ),
   server = function(input, output) {}
 )
}

}
\author{
David Granjon, \email{dgranjon@ymail.com}
}
